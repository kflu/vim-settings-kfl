" ###################################################################
" # vimrc file
" # by Kefei Lu
" # modified from the default vimrc file.
" # Updated: 2009.10.18
" ###################################################################
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"          for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"        for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.

" ------------------------- VUNDLE SETUP -------------------------
set nocompatible " be iMproved, required
filetype off " required

" set the runtime path to include Vundle and initialize
" vim-settings-kfl should git clone Vundle.vim into ~/vundle

set rtp+=~/vim-plug/vim-plug
call plug#begin('~/vim-plug')

" Disable tagbar - very slow when loading file in some folders 
Plug 'majutsushi/tagbar' " Right hand side nav bar for code
Plug 'kflu/vim-mark' " mark keywords with colors
Plug 'Raimondi/delimitMate' " parenthesis auto closing and jumping
Plug 'tpope/vim-surround' " surrounding text blocks with parenthesis
Plug 'tpope/vim-repeat' " use . to repeat plugin ops, like the ones in surround
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-fugitive'

Plug 'bling/vim-airline' " status line
Plug 'scrooloose/nerdtree'
Plug 'kien/ctrlp.vim' " fuzzy search
Plug 'scrooloose/syntastic' " Syntax checking framework
Plug 'nathanaelkane/vim-indent-guides' " Show visual indication of indentation <Leader>ig
Plug 'terryma/vim-expand-region' " expand selection progressively. use +/_ to expand/reduce selection
Plug 'tpope/vim-dispatch'
" Plug 'OmniSharp/omnisharp-vim'
" Plug 'ervandew/supertab'     " disable b/c it's annoying conflict with tab
Plug 'szw/vim-maximizer' " Maximize and restores windows <F3> to toggle

" ----- snipmate, snippets and the dependencies -----
Plug 'garbas/vim-snipmate' " the main snipmate plugin
Plug 'honza/vim-snippets' " snippets for snipmate
" Dependencies
Plug 'marcweber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'

Plug 'mileszs/ack.vim' " use ag or ack

" ----- language support -----
Plug 'plasticboy/vim-markdown'
Plug 'kchmck/vim-coffee-script' " syntax, tasks, linting (via syntactic & coffeelint)
Plug 'chrisbra/csv.vim'
" Tempororily disabled due to the lack of useness.
" Plug 'ternjs/tern_for_vim' " Js code completion
Plug 'pangloss/vim-javascript'
" Plug 'vim-scripts/paredit.vim'
Plug 'wannesm/wmgraphviz.vim' "graphviz
" Plug 'fsharp/vim-fsharp'
" Plug 'OrangeT/vim-csharp' " Disable csharp as it errors when running under console (vim)

" LSP support
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

" Disable gitgutter - after update it asks to get the gitgutter_grep which I
" don't want to.
" Plug 'airblade/vim-gitgutter' " Show git status in sign column
Plug 'kshenoy/vim-signature' " Display markers
Plug 'vim-scripts/LargeFile' " load large files more efficiently
Plug 'vim-scripts/DrawIt' " draw ASCII arts

" ----- Themes -----
" Plug 'altercation/vim-colors-solarized'
" Use my fork before altercation/solarized/issues/252 is fixed
Plug 'kflu/vim-colors-solarized'


call plug#end()

filetype plugin indent on    " required
" ------------------------- VUNDLE SETUP -------------------------

" ------------------------- EXAMPLE SETTINGS -------------------------
if v:progname =~? "evim"
    finish
endif
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
    set nobackup        " do not keep a backup file, use versions instead
else
    set backup 	      " keep a backup file
endif
set history=50        " keep 50 lines of command line history
set ruler        " show the cursor position all the time
set showcmd        " display incomplete commands
set incsearch        " do incremental searching

" Don't use Ex mode, use Q for formatting
map Q gq

" In many terminal emulators the mouse works just fine, thus enable it.
set mouse=a

if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
endif

if has("autocmd")

    " Enable file type detection.
    " Use the default filetype settings, so that mail gets 'tw' set to 72,
    " 'cindent' is on in C files, etc.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    " Put these in an autocmd group, so that we can delete them easily.
    augroup vimrcEx
        au!

        autocmd FileType text setlocal textwidth=78

        " When editing a file, always jump to the last known cursor position.
        " Don't do it when the position is invalid or when inside an event handler
        " (happens when dropping a file on gvim).
        autocmd BufReadPost *
                    \ if line("'\"") > 0 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif

    augroup END

else

    set autoindent        " always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
            \ | wincmd p | diffthis
" ------------------------- EXAMPLE SETTINGS -------------------------

" ==============================
"  MY SETTINGS
" ==============================
function s:IsWindows()
    return has("win16") || has("win32") || has("win64") || has("win95")
endfunction

function s:SetFontWindows()
    set guifont=DejaVu_Sans_Mono:h9,
                \Bitstream_Vera_Sans_Mono:h9,
                \Monaco:h9,
                \Consolas:h9,
                \Lucida_Console:h9,
                \Courier_New:h9,
endfunction

function s:SetFontUnix()
    set guifont=DejaVu\ Sans\ Mono\ 10,
                \Monospace\ 9,
endfunction

function s:ConfigureFont()
    if s:IsWindows()
        call s:SetFontWindows()
    else
        call s:SetFontUnix()
    endif

    " On Windows this needs the Chinese Simplified language to be enabled,
    " otherwise E231 is thrown on gvim exit.
    " Appending Monospace,Consolas to make sure this setting never ever 
    " throw.
    set guifontwide=Yahei_Mono:h10:cGB2312,SimHei,Monospace,Consolas,Menlo

    call s:MapFontChanges()
endfunction

" Change font size in 'guifont'
"   size:
"       '+'/'-':    increase/descrease font size
"       else:       Set font size to a:size (0 to default size)
"
"   This function will convert the fonts defined in 'guifont' to other font
"   sizes. Currently font size don't check if it gets to zero or minus.
function s:ChangeFontSize(size)
    if has("gui_running")
        if a:size == '+'
            let eval_str = '\=eval(submatch(0)+1)'
        elseif a:size == '-'
            let eval_str = '\=eval(submatch(0)-1)'
        else
            let eval_str = str2nr(a:size)
        endif

        let fontList = split(&guifont, ',')
        let fontList2 = []

        for font in fontList
            call add( fontList2, substitute(font, '\d\+', eval_str, '') )
        endfor
        let &guifont = join( fontList2, ',' )
    endif
endfunction

function s:MapFontChanges()
    if has("gui_running")
        map <Leader>= :<C-U>
                    \for i in range(v:count1)<bar>
                    \   call <SID>ChangeFontSize('+')<bar>
                    \endfor<CR>

        map <Leader>- :<C-U>
                    \for i in range(v:count1)<bar>
                    \   call <SID>ChangeFontSize('-')<bar>
                    \endfor<CR>

        map <Leader>0 :<C-U>call <SID>ChangeFontSize(0)<CR>
    endif
endfunction

function s:ExchangeMake(...)
    let oldmakeprg = &l:makeprg
    let oldefm = &l:efm
    try
        setlocal errorformat=%.%#%\\d%\\+>%f(%l\\,%c)\ :%m,%.%#%\\d%\\+>%f\ CS%n:\ %m,%-G%.%#
        if 0 == a:0
            setlocal makeprg=build\ -Cc
        else
            " Just display from build log
            let &l:makeprg = "type " . a:1
        endif

        Make
        cw
    finally
        let &l:makeprg = oldmakeprg
        let &l:efm = oldefm
    endtry
endfunction

" The script to enable using Google CodeSearch as a grep program
function s:Csearch(...)
    let oldprg = &l:grepprg
    let oldgfm = &l:gfm
    try
        setlocal grepformat=%f\:%l\:%m
        setlocal grepprg=csearch\ -n 
        execute "grep" join(a:000)
    finally
        let &l:grepprg = oldprg
        let &l:gfm = oldgfm
    endtry
endfunction

" Search tag files in the following locations
" for "tags" 8 lvls upward
function s:ConfigureTags()
    set tags=
                \tags,
                \../tags,
                \../../tags,
                \../../../tags,
                \../../../../tags,
                \../../../../../tags,
                \../../../../../../tags,
                \../../../../../../../tags,
                \../../../../../../../../tags,
                \/usr/include/tags,

    "       include tag files from $HOME/tags
    let tagfiles = glob( "$HOME/tags/**/*" )
    let &tags = &tags . ',' . substitute(tagfiles, "\n", ",", "g")
endfunction

" C# settings
function s:ConfigureCSharp()

endfunction " s:ConfigureCSharp

function s:ConfigureJavascript()
    let g:syntastic_javascript_checkers = ['eslint']
endfunction

function s:ConfigurePython()
    set sw=4 ts=4 smarttab expandtab autoindent
    " For python doc string (triple quotes), see
    " https://github.com/Raimondi/delimitMate/issues/55
    let b:delimitMate_nesting_quotes = ['"', "'"]
endfunction

" latex-suite settings
function s:ConfigureTex()
    " IMPORTANT: win32 users will need to have 'shellslash' set so that latex
    " can be called correctly.
    set shellslash

    " IMPORTANT: grep will sometimes skip displaying the file name if you
    " search in a singe file. This will confuse Latex-Suite. Set your grep
    " program to always generate a file-name.
    set grepprg=grep\ -nH\ $*

    " This considers ":" in the keywords when search using C-N, C-P Useful in
    " latex when input sec:xxx
    set iskeyword+=:

    " OPTIONAL: This enables automatic indentation as you type.
    filetype indent on

    " OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
    " 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
    " The following changes the default filetype back to 'tex':
    let g:tex_flavor='latex'

    let g:Tex_ViewRule_dvi = 'dviout.bat -GS=0'
endfunction

function s:ConfigureCscope()
    if has("cscope")
        set csto=0
        " set cst " Use of :tag invokes :cstag:
        set nocsverb
        for prefix in [
                    \"../../../../../..",
                    \"../../../../..",
                    \"../../../..",
                    \"../../..",
                    \"../..",
                    \"..",
                    \"."
                    \]
            " prefix issue: http://bit.ly/QKhlJe
            let csfile = prefix . "/" . "cscope.out"
            if filereadable(csfile)
                execute "cs add " . csfile . " " . prefix
                break
            endif
        endfor
        set csverb
    endif
    set cscopequickfix=s-,c-,d-,i-,t-,e-

    nmap <C-_>s :lcs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>g :lcs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>c :lcs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>t :lcs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>e :lcs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>f :lcs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-_>i :lcs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-_>d :lcs find d <C-R>=expand("<cword>")<CR><CR>
endfunction

function s:ConfigureCoffeeScript()
    set sw=2 ts=2 smarttab expandtab autoindent
    " This needs to work with the coffeescript syntax definition in .ctags
    " file. See https://gist.github.com/puzzl3r/c2881068454d66f5d84a
    let g:tagbar_type_coffee = {
                \ 'ctagstype' : 'coffee',
                \ 'kinds'     : [
                \ 'c:classes',
                \ 'm:methods',
                \ 'f:functions',
                \ 'v:variables',
                \ 'f:fields',
                \ ]
                \ }
endfunction

function s:ConfigureCsv()
    " don't conceal the delimiter. Concealing delimiter is confusing as the
    " delimiters are replaced with pipes (|). Also column highlighting doesn't
    " work on those pipes so empty columns are not highlighted.
    let g:csv_no_conceal = 1
    CSVInit
endfunction

function s:ConfigureMenu()
    amenu 700.100 &My.&NERDTree                 :NERDTreeToggle<CR>
    amenu 700.200 &My.&Tagbar                   :TagbarToggle<CR>
    amenu 700.300 &My.-SEP1-                    :
    amenu 700.400 &My.&Install\ new\ plugins    :PlugInstall<CR>
    amenu 700.420 &My.&Clean\ plugins           :PlugClean<CR>
    amenu 700.500 &My.&Update\ all\ plugins     :PlugInstall!<CR>
    amenu 700.600 &My.-SEP2-                    :
    amenu 700.700 &My.&Copy\ file\ path         :Cpfn<CR>
    amenu 700.800 &My.&Horizontal\ Scrollbar    :Hsbar<CR>
    amenu 700.900 &My.&vimrc                    :new $MYVIMRC<CR>

    if !has('gui_running')
        " Source menu.vim so :emenu can use them in non-gui environments
        so $VIMRUNTIME/menu.vim
    endif
endfunction

function s:ToggleHorizontalScrollbar()
    let index=match(&guioptions, "b")
    if index >= 0
        set guioptions-=b
    else
        set guioptions+=b
    endif
endfunction

function s:ConfigureEasyMotion()
  let g:EasyMotion_smartcase = 1
  map <Leader>em <Plug>(easymotion-prefix)
  map <C-S> <Plug>(easymotion-bd-w)
endfunction

function s:ConfigureSuperTab()
    let g:SuperTabDefaultCompletionType = 'context'
    let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
endfunction

function s:ConfigureOmniSharp()

    augroup omnisharp_commands
        autocmd!

        "Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
        autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

        " Synchronous build (blocks Vim)
        "autocmd FileType cs nnoremap <F5> :wa!<cr>:OmniSharpBuild<cr>
        " Builds can also run asynchronously with vim-dispatch installed
        autocmd FileType cs nnoremap <leader>b :wa!<cr>:OmniSharpBuildAsync<cr>
        " automatic syntax check on events (TextChanged requires Vim 7.4)
        autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck

        " Automatically add new cs files to the nearest project on save
        autocmd BufWritePost *.cs call OmniSharp#AddToProject()

        "show type information automatically when the cursor stops moving
        autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

        "The following commands are contextual, based on the current cursor position.

        autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<cr>
        autocmd FileType cs nnoremap <buffer> <leader>fi :OmniSharpFindImplementations<cr>
        autocmd FileType cs nnoremap <buffer> <leader>ft :OmniSharpFindType<cr>
        autocmd FileType cs nnoremap <buffer> <leader>fs :OmniSharpFindSymbol<cr>
        autocmd FileType cs nnoremap <buffer> <leader>fu :OmniSharpFindUsages<cr>
        "finds members in the current buffer
        autocmd FileType cs nnoremap <buffer> <leader>fm :OmniSharpFindMembers<cr>
        " cursor can be anywhere on the line containing an issue
        autocmd FileType cs nnoremap <buffer> <leader>x  :OmniSharpFixIssue<cr>
        autocmd FileType cs nnoremap <buffer> <leader>fx :OmniSharpFixUsings<cr>
        autocmd FileType cs nnoremap <buffer> <leader>tl :OmniSharpTypeLookup<cr>
        autocmd FileType cs nnoremap <buffer> <leader>dc :OmniSharpDocumentation<cr>
        "navigate up by method/property/field
        autocmd FileType cs nnoremap <buffer> <C-K> :OmniSharpNavigateUp<cr>
        "navigate down by method/property/field
        autocmd FileType cs nnoremap <buffer> <C-J> :OmniSharpNavigateDown<cr>

    augroup END
    
endfunction

function s:ConfigureAirline()
    " Only enable airline indent check. Don't enable the default trailing
    " space check as it's too distracting
    let g:airline#extensions#whitespace#checks = [ 'indent' ]
    let g:airline#extensions#tabline#enabled = 1
endfunction

function s:ConfigureDelimiteMate()
    let g:delimitMate_expand_space = 1
    let g:delimitMate_expand_cr = 1
endfunction

function s:Main()

    " Map ChangeFontSize() to hot keys
    let g:mapleader = " "
    call s:ConfigureAirline()

    set sw=4 ts=4 smarttab expandtab autoindent
    set cursorline " highlight current line
    " last window will always have a status line. This is needed by vim-airline
    set laststatus=2
    set directory+=$TEMP
    set encoding=utf-8
    set nowrap " Do not wrap long lines
    set vb            " Use visual bell instead of beep
    set linebreak       " break line at word boundary
    set number          " line number
    " allow a window to shrink minimally
    set winminheight=0
    set winminwidth=0

    set foldmethod=indent
    if (has('gui_running'))
        set foldcolumn=4
    endif
    set foldminlines=0 " allow folding 1-liner
    set nofen

    set display+=lastline "with this, the last line will not have @ chars.
    set ttymouse=xterm2
    set wildmenu     " Show menu for command line autocomplete
    set ignorecase
    set smartcase

    " ------------------------- GUI settings -------------------------
    if has("gui_running")
        set go-=T
        colo solarized " this color doesn't work well under console
        set bg=dark
        call s:ConfigureFont()
        autocmd GUIEnter * winsize 100 40
    else
        colo desert
    endif
    " ------------------------- GUI settings -------------------------

    call s:ConfigureTags()
    call s:ConfigureCscope()

    " Adding 'p' for quickfix window to preview files
    if has('autocmd') && has('quickfix')
        au BufWinEnter quickfix exe 'map <buffer> p <CR><C-W>p'
    endif

    " ------------------------- OMNI COMPLETION SETTINGS -------------------------
    if has('autocmd')

        set pumheight=8 " set completion window height
        " the following lines close the preview window after a completion
        autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
        autocmd InsertLeave * if pumvisible() == 0|pclose|endif

    endif
    " ------------------------- OMNI COMPLETION SETTINGS -------------------------

    " ------------------------- KEY MAPPINGS -------------------------
    " Pressing <Leader> twice put you in command mode
    map <Leader><Leader> :
    map <Leader>tt :TagbarToggle<CR>
    map <Leader>nn :NERDTree<CR>
    map <C-Tab> <C-W><C-W>

    " Quick escape from insert mode
    imap jj <ESC>

    " To resolve <S-Tab> conflict with snipMate
    imap <C-J> <Plug>delimitMateS-Tab
    " ------------------------- KEY MAPPINGS -------------------------

    " ------------------------- CUSTOM COMMANDS -------------------------
    " copy file name to system clipboard (verified on Windows)
    command Cpfn let @* = expand("%:p")
    command Hsbar call s:ToggleHorizontalScrollbar()
    command CD cd %:p:h
    command LCD lcd %:p:h
    command Bcc call s:ExchangeMake()
    command Bccl call s:ExchangeMake('buildd.err')

    " Enable using CodeSearch as a grep program
    command -nargs=+ Csearch call s:Csearch(<f-args>)

    command Exdiff !start cmd /c windiff.exe -l %
    command Exedit !sd edit %
    command Exopened !start cmd /c sdv opened

    " I tried !start cmd /c start "" "URL". This URL can contain spaces. But
    " it cannot contain # signs as a limitation of Windows filenames. In
    " additional, ftype http doesn't give me the correct default browser
    " executable. So I have to use a hard coded browser.
    command -nargs=+ G !start "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" "https://www.google.com/search?q=<args>"
    command -nargs=+ DD !start "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" "http://devdocs.io\#q=<args>"
    " ------------------------- CUSTOM COMMANDS -------------------------

    " ------------------------- FILE TYPE SPECIFIC CONFIGURATIONS -------------------------
    if has('autocmd')
        autocmd FileType python call s:ConfigurePython()
        autocmd FileType cs call s:ConfigureCSharp()
        autocmd FileType tex call s:ConfigureTex()
        autocmd FileType coffee call s:ConfigureCoffeeScript()
        autocmd FileType csv call s:ConfigureCsv()
        autocmd FileType javascript call s:ConfigureJavascript()
        autocmd BufNewFile,BufRead *.md set filetype=markdown " override .md from modula2
    endif
    " ------------------------- FILE TYPE SPECIFIC CONFIGURATIONS -------------------------

    if s:IsWindows()
        " Make sure we use findstr on Windows, no matter if grep is there or not
        set grepprg=findstr\ /N

        " Don't source mswin, as it introduces too many keybindings that can
        " be otherwise used
        " source $VIMRUNTIME/mswin.vim " Add support for copy/paste/cut/undo
        " " Unmap windows behaviors of the following keys from mswin.vim
        " unmap <C-Y>
        " unmap <C-Z>
    endif

    " Ctrl-C/V/A. Only do this on Windows. As in *nix some key conflicts,
    " e.g., C-Q can't be used for block selection so we have to use C-V.
    vnoremap <C-C> "+y
    map      <C-V> "+gP
    cmap     <C-V> <C-R>+
    imap     <C-V> <C-R>+

    " Remap block selection <c-v> to <a-v>
    " On Mac (and in VNC) <a-v> is <esc>v
    " https://stackoverflow.com/a/24047539/695964
    nnoremap <a-v> <c-v>
    nnoremap <esc>v <c-v>

    if s:IsWindows()
        noremap  <C-A> gggH<C-O>G
        inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
        cnoremap <C-A> <C-C>gggH<C-O>G
        onoremap <C-A> <C-C>gggH<C-O>G
        snoremap <C-A> <C-C>gggH<C-O>G
        xnoremap <C-A> <C-C>ggVG
    endif

    if filereadable($HOME."/local.vim")
        exe "so $HOME"."/local.vim"
    endif

    call s:ConfigureMenu()
    call s:ConfigureEasyMotion()
    call s:ConfigureSuperTab()
    " call s:ConfigureOmniSharp()
    call s:ConfigureDelimiteMate()

    " Don't close location list when CR is pressed on an entry
    let g:syntastic_auto_loc_list = 0

    if !s:IsWindows()
        runtime! ftplugin/man.vim
    endif

    if executable('ag') " use ag and fallback to ack
        let g:ackprg = 'ag --vimgrep'
    endif

endfunction

call s:Main()
