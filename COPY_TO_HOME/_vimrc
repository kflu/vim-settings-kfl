if has('ivim')
    isetekbd append {'buttons':[
                               \{'keys':[
                                        \{'title':'C',
                                        \ 'type':'command',
                                        \ 'contents':'normal "+y'},
                                        \{'title':'P',
                                        \ 'type':'command',
                                        \ 'contents':'normal "+p'}],
                               \ 'locations':[0,2]}]}
endif


" ###################################################################
" # vimrc file
" # by Kefei Lu
" # modified from the default vimrc file.
" # Updated: 2009.10.18
" ###################################################################
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"          for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"        for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.

" ------------------------- Plugin SETUP -------------------------
fun s:plugins()
    set nocompatible " be iMproved, required
    filetype off " required
    call plug#begin('~/vim-plug')

    Plug 'ojroques/vim-oscyank'
    Plug '~/work/osc_yank_regmon'

    " Disable tagbar - very slow when loading file in some folders
    Plug 'majutsushi/tagbar' " Right hand side nav bar for code
    Plug 'kflu/vim-mark' " mark keywords with colors
    " delimitMate turns out quite annoying. Try disable it (20190106)
    " Plug 'Raimondi/delimitMate' " parenthesis auto closing and jumping
    Plug 'tpope/vim-surround' " surrounding text blocks with parenthesis
    Plug 'tpope/vim-repeat' " use . to repeat plugin ops, like the ones in surround
    Plug 'easymotion/vim-easymotion'
    Plug 'tpope/vim-fugitive', { 'tag': 'v3.0' }
    Plug 'kflu/vim-mercenary'

    " Plug 'vim-airline/vim-airline', { 'tag': 'v0.11' } " status line
    Plug 'scrooloose/nerdtree'
    " Plug 'kien/ctrlp.vim' " fuzzy search
    " Plug 'scrooloose/syntastic' " Syntax checking (lint) framework
    " Plug 'neomake/neomake'
    Plug 'nathanaelkane/vim-indent-guides' " Show visual indication of indentation <Leader>ig
    Plug 'terryma/vim-expand-region' " expand selection progressively. use +/_ to expand/reduce selection
    Plug 'tpope/vim-dispatch'
    " Plug 'OmniSharp/omnisharp-vim'
    " Plug 'ervandew/supertab'     " disable b/c it's annoying conflict with tab
    Plug 'szw/vim-maximizer' " Maximize and restores windows <F3> to toggle
    Plug 'djoshea/vim-autoread' " detect external file changes

    Plug 'mileszs/ack.vim' " use ag or ack

    " Use Readline in command mode and insert mode
    Plug 'tpope/vim-rsi'

    " LSP support
    Plug 'prabirshrestha/vim-lsp', { 'tag': 'v0.1.4' }
    Plug 'mattn/vim-lsp-settings'
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'

    " ----- language support -----
    Plug 'plasticboy/vim-markdown'
    Plug 'ferrine/md-img-paste.vim' " Paste images in markdown 
    Plug 'kchmck/vim-coffee-script' " syntax, tasks, linting (via syntactic & coffeelint)
    Plug 'chrisbra/csv.vim'
    Plug 'Vimjas/vim-python-pep8-indent'
    " Tempororily disabled due to the lack of useness.
    " Plug 'ternjs/tern_for_vim' " Js code completion
    Plug 'pangloss/vim-javascript'
    " Plug 'vim-scripts/paredit.vim'
    Plug 'wannesm/wmgraphviz.vim' "graphviz
    " Plug 'fsharp/vim-fsharp'
    " Plug 'OrangeT/vim-csharp' " Disable csharp as it errors when running under console (vim)
    Plug 'solarnz/thrift.vim'

    " Disable gitgutter - after update it asks to get the gitgutter_grep which I
    " don't want to.
    " Plug 'airblade/vim-gitgutter' " Show git status in sign column
    Plug 'kshenoy/vim-signature' " Display markers
    Plug 'vim-scripts/LargeFile' " load large files more efficiently

    " fzf the fuzzy searcher
    " fzf binary needs to be installed separately
    Plug 'junegunn/fzf'
    Plug 'junegunn/fzf.vim'
    Plug 'wannesm/wmgraphviz.vim'

    " Diff two directories and files in them
    Plug 'will133/vim-dirdiff'

    Plug '907th/vim-auto-save'
    Plug 'jez/vim-better-sml'
    Plug 'wlangstroth/vim-racket'
    Plug 'MicahElliott/vrod'

    " Switch .cpp and .h
    Plug 'kflu/a.vim'
    Plug 'kflu/paste_mode.vim'

    Plug 'MattesGroeger/vim-bookmarks'


    " ----- Themes -----
    " Plug 'altercation/vim-colors-solarized'
    " Use my fork before altercation/solarized/issues/252 is fixed
    Plug 'kflu/vim-colors-solarized'
    Plug 'NLKNguyen/papercolor-theme'
    Plug 'junegunn/goyo.vim'  " Distraction free writing
    Plug 'dhruvasagar/vim-table-mode'

    Plug 'luochen1990/rainbow'

    " Send to REPL
    Plug 'jpalardy/vim-slime'
    Plug 'roxma/vim-tmux-clipboard'
    Plug 'tmux-plugins/vim-tmux-focus-events'

    if has('nvim')
        " NeoVim specific plugins
    endif

    call plug#end()

    filetype plugin indent on    " required
endfun " ------------------------- Plugin SETUP -------------------------
try
    call s:plugins()
catch /.*/
    echom 'Error loading plugins: ' .. v:exception
endtry


" ------------------------- EXAMPLE SETTINGS -------------------------
if v:progname =~? "evim"
    finish
endif
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50        " keep 50 lines of command line history
set ruler        " show the cursor position all the time
set showcmd        " display incomplete commands
set incsearch        " do incremental searching

" Don't use Ex mode, use Q for formatting
map Q gq

" In many terminal emulators the mouse works just fine, thus enable it.
set mouse=a

if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
endif

if has("autocmd")

    " Enable file type detection.
    " Use the default filetype settings, so that mail gets 'tw' set to 72,
    " 'cindent' is on in C files, etc.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    " Put these in an autocmd group, so that we can delete them easily.
    augroup vimrcEx
        au!

        autocmd FileType text setlocal textwidth=78

        " When editing a file, always jump to the last known cursor position.
        " Don't do it when the position is invalid or when inside an event handler
        " (happens when dropping a file on gvim).
        autocmd BufReadPost *
                    \ if line("'\"") > 0 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif

    augroup END

else

    set autoindent        " always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
            \ | wincmd p | diffthis
" ------------------------- EXAMPLE SETTINGS -------------------------

" ==============================
"  MY SETTINGS
" ==============================
function s:IsWindows()
    return has("win16") || has("win32") || has("win64") || has("win95")
endfunction

function s:SetFontWindows()
    set guifont=
                \Consolas:h9,
                \DejaVu_Sans_Mono:h9,
                \Bitstream_Vera_Sans_Mono:h9,
                \Monaco:h9,
                \Lucida_Console:h9,
                \Courier_New:h9,
endfunction

function s:SetFontUnix()
    set guifont=DejaVu\ Sans\ Mono\ 10,
                \Monospace\ 9,
endfunction

function s:ConfigureFont()
    if s:IsWindows()
        call s:SetFontWindows()
    else
        call s:SetFontUnix()
    endif

    " On Windows this needs the Chinese Simplified language to be enabled,
    " otherwise E231 is thrown on gvim exit.
    " Appending Monospace,Consolas to make sure this setting never ever
    " throw.
    set guifontwide=Yahei_Mono:h10:cGB2312,SimHei,Monospace,Consolas,Menlo

    call s:MapFontChanges()
endfunction

" Change font size in 'guifont'
"   size:
"       '+'/'-':    increase/descrease font size
"       else:       Set font size to a:size (0 to default size)
"
"   This function will convert the fonts defined in 'guifont' to other font
"   sizes. Currently font size don't check if it gets to zero or minus.
function s:ChangeFontSize(size)
    if has("gui_running")
        if a:size == '+'
            let eval_str = '\=eval(submatch(0)+1)'
        elseif a:size == '-'
            let eval_str = '\=eval(submatch(0)-1)'
        else
            let eval_str = str2nr(a:size)
        endif

        let fontList = split(&guifont, ',')
        let fontList2 = []

        for font in fontList
            call add( fontList2, substitute(font, '\d\+', eval_str, '') )
        endfor
        let &guifont = join( fontList2, ',' )
    endif
endfunction

function s:MapFontChanges()
    if has("gui_running")
        map <Leader>= :<C-U>
                    \for i in range(v:count1)<bar>
                    \   call <SID>ChangeFontSize('+')<bar>
                    \endfor<CR>

        map <Leader>- :<C-U>
                    \for i in range(v:count1)<bar>
                    \   call <SID>ChangeFontSize('-')<bar>
                    \endfor<CR>

        map <Leader>0 :<C-U>call <SID>ChangeFontSize(0)<CR>
    endif
endfunction

function s:ExchangeMake(...)
    let oldmakeprg = &l:makeprg
    let oldefm = &l:efm
    try
        setlocal errorformat=%.%#%\\d%\\+>%f(%l\\,%c)\ :%m,%.%#%\\d%\\+>%f\ CS%n:\ %m,%-G%.%#
        if 0 == a:0
            setlocal makeprg=build\ -Cc
        else
            " Just display from build log
            let &l:makeprg = "type " . a:1
        endif

        Make
        cw
    finally
        let &l:makeprg = oldmakeprg
        let &l:efm = oldefm
    endtry
endfunction

" The script to enable using Google CodeSearch as a grep program
function s:Csearch(...)
    let oldprg = &l:grepprg
    let oldgfm = &l:gfm
    try
        setlocal grepformat=%f\:%l\:%m
        setlocal grepprg=csearch\ -n 
        execute "grep" join(a:000)
    finally
        let &l:grepprg = oldprg
        let &l:gfm = oldgfm
    endtry
endfunction

" Search tag files in the following locations
" for "tags" 8 lvls upward
function s:ConfigureTags()
    set tags=
                \tags,
                \../tags,
                \../../tags,
                \../../../tags,
                \../../../../tags,
                \../../../../../tags,
                \../../../../../../tags,
                \../../../../../../../tags,
                \../../../../../../../../tags,
                \/usr/include/tags,

    "       include tag files from $HOME/tags
    let tagfiles = glob( "$HOME/tags/**/*" )
    let &tags = &tags . ',' . substitute(tagfiles, "\n", ",", "g")
endfunction

" C# settings
function s:ConfigureCSharp()

endfunction " s:ConfigureCSharp

function s:ConfigureJavascript()
    let g:syntastic_javascript_checkers = ['eslint']
endfunction

function s:ConfigCoding()
    set sw=4 ts=4 smarttab expandtab autoindent
endfunction

function s:ConfigurePython()
    " For python doc string (triple quotes), see
    " https://github.com/Raimondi/delimitMate/issues/55
    let b:delimitMate_nesting_quotes = ['"', "'"]
    let g:syntastic_python_checkers = ['mypy', 'flake8']
    let g:syntastic_aggregate_errors = 1
endfunction

" latex-suite settings
function s:ConfigureTex()

    " IMPORTANT: win32 users will need to have 'shellslash' set so that latex
    " can be called correctly.
    set shellslash

    " IMPORTANT: grep will sometimes skip displaying the file name if you
    " search in a singe file. This will confuse Latex-Suite. Set your grep
    " program to always generate a file-name.
    set grepprg=grep\ -nH\ $*

    " This considers ":" in the keywords when search using C-N, C-P Useful in
    " latex when input sec:xxx
    set iskeyword+=:

    " OPTIONAL: This enables automatic indentation as you type.
    filetype indent on

    " OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
    " 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
    " The following changes the default filetype back to 'tex':
    let g:tex_flavor='latex'

    let g:Tex_ViewRule_dvi = 'dviout.bat -GS=0'
endfunction

function s:ConfigureCscope()
    if has("cscope")
        set csto=0
        " set cst " Use of :tag invokes :cstag:
        set nocsverb
        for prefix in [
                    \"../../../../../..",
                    \"../../../../..",
                    \"../../../..",
                    \"../../..",
                    \"../..",
                    \"..",
                    \"."
                    \]
            " prefix issue: http://bit.ly/QKhlJe
            let csfile = prefix . "/" . "cscope.out"
            if filereadable(csfile)
                execute "cs add " . csfile . " " . prefix
                break
            endif
        endfor
        set csverb
    endif
    set cscopequickfix=s-,c-,d-,i-,t-,e-

    nmap <C-_>s :lcs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>g :lcs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>c :lcs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>t :lcs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>e :lcs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>f :lcs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-_>i :lcs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-_>d :lcs find d <C-R>=expand("<cword>")<CR><CR>
endfunction

function s:ConfigureCoffeeScript()
    " This needs to work with the coffeescript syntax definition in .ctags
    " file. See https://gist.github.com/puzzl3r/c2881068454d66f5d84a
    let g:tagbar_type_coffee = {
                \ 'ctagstype' : 'coffee',
                \ 'kinds'     : [
                \ 'c:classes',
                \ 'm:methods',
                \ 'f:functions',
                \ 'v:variables',
                \ 'f:fields',
                \ ]
                \ }
endfunction

function s:ConfigureCsv()
    " don't conceal the delimiter. Concealing delimiter is confusing as the
    " delimiters are replaced with pipes (|). Also column highlighting doesn't
    " work on those pipes so empty columns are not highlighted.
    let g:csv_no_conceal = 1
    CSVInit
endfunction

function s:ConfigureMenu()
    amenu 700.100 &My.&NERDTree                 :NERDTreeToggle<CR>
    amenu 700.200 &My.&Tagbar                   :TagbarToggle<CR>
    amenu 700.300 &My.-SEP1-                    :
    amenu 700.400 &My.&Install\ new\ plugins    :PlugInstall<CR>
    amenu 700.420 &My.&Clean\ plugins           :PlugClean<CR>
    amenu 700.500 &My.&Update\ all\ plugins     :PlugInstall!<CR>
    amenu 700.600 &My.-SEP2-                    :
    amenu 700.700 &My.&Copy\ file\ path         :Cpfn<CR>
    amenu 700.800 &My.&Horizontal\ Scrollbar    :Hsbar<CR>
    amenu 700.900 &My.&vimrc                    :new $MYVIMRC<CR>

    if !has('gui_running')
        " Source menu.vim so :emenu can use them in non-gui environments
        so $VIMRUNTIME/menu.vim
    endif
endfunction

function s:ToggleHorizontalScrollbar()
    let index=match(&guioptions, "b")
    if index >= 0
        set guioptions-=b
    else
        set guioptions+=b
    endif
endfunction

function s:ConfigureEasyMotion()
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_smartcase = 1
    map <Leader>g <Plug>(easymotion-bd-w)
endfunction

function s:ConfigureSuperTab()
    let g:SuperTabDefaultCompletionType = 'context'
    let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
endfunction

function s:ConfigureThrift()
    setlocal tabstop=2 shiftwidth=2  " overrides some prev tab settings
endfunction

function s:ConfigureMarkdown()
    
    setlocal wrap tw=0
    let g:vim_markdown_folding_disabled = 1

    " Disable comments formatting. *, - are treated as comments and interfer
    " with markdown list formatting Since markdown doesn't have comments, this
    " is safe to remove
    setlocal comments=

    " Also recognize `[ ]` as list header
    setlocal formatlistpat+=\\\|^\\s*\\[\ \\]\ 

    set breakindent " soft wrapped lines are indented too
    let &showbreak = '↳ ' " visual line break indicator

    " Command to paste image at current location
    command! Mdimg call mdip#MarkdownClipboardImage()

    " vim-markdown settings:
    let g:vim_markdown_conceal_code_blocks = 0  " do not hide code block marks

endfunction

function s:ConfigureOmniSharp()

    augroup omnisharp_commands
        autocmd!

        "Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
        autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

        " Synchronous build (blocks Vim)
        "autocmd FileType cs nnoremap <F5> :wa!<cr>:OmniSharpBuild<cr>
        " Builds can also run asynchronously with vim-dispatch installed
        autocmd FileType cs nnoremap <leader>b :wa!<cr>:OmniSharpBuildAsync<cr>
        " automatic syntax check on events (TextChanged requires Vim 7.4)
        autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck

        " Automatically add new cs files to the nearest project on save
        autocmd BufWritePost *.cs call OmniSharp#AddToProject()

        "show type information automatically when the cursor stops moving
        autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

        "The following commands are contextual, based on the current cursor position.

        autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<cr>
        autocmd FileType cs nnoremap <buffer> <leader>fi :OmniSharpFindImplementations<cr>
        autocmd FileType cs nnoremap <buffer> <leader>ft :OmniSharpFindType<cr>
        autocmd FileType cs nnoremap <buffer> <leader>fs :OmniSharpFindSymbol<cr>
        autocmd FileType cs nnoremap <buffer> <leader>fu :OmniSharpFindUsages<cr>
        "finds members in the current buffer
        autocmd FileType cs nnoremap <buffer> <leader>fm :OmniSharpFindMembers<cr>
        " cursor can be anywhere on the line containing an issue
        autocmd FileType cs nnoremap <buffer> <leader>x  :OmniSharpFixIssue<cr>
        autocmd FileType cs nnoremap <buffer> <leader>fx :OmniSharpFixUsings<cr>
        autocmd FileType cs nnoremap <buffer> <leader>tl :OmniSharpTypeLookup<cr>
        autocmd FileType cs nnoremap <buffer> <leader>dc :OmniSharpDocumentation<cr>
        "navigate up by method/property/field
        autocmd FileType cs nnoremap <buffer> <C-K> :OmniSharpNavigateUp<cr>
        "navigate down by method/property/field
        autocmd FileType cs nnoremap <buffer> <C-J> :OmniSharpNavigateDown<cr>

    augroup END

endfunction

function s:ConfigureAirline()
    " Only enable airline indent check. Don't enable the default trailing
    " space check as it's too distracting
    let g:airline#extensions#whitespace#checks = [ 'indent' ]
    let g:airline#extensions#tabline#enabled = 1
endfunction

function s:ConfigureDelimiteMate()
    let g:delimitMate_expand_space = 1
    let g:delimitMate_expand_cr = 1
endfunction

function s:goyo_enter()
    setlocal wrap
    setlocal guioptions-=r
endfunction

function s:goyo_leave()
    setlocal wrap<
    setlocal guioptions<
endfunction

function s:Main()

    set noswapfile
    " Disable right scrollbar - I don't use it often
    set guioptions-=r
    set hidden
    set wrapscan  " disable search wrap

    " ----
    " Disabled due to privacy issue on pubnix
    " ----
    set nobackup
    " Move backup files out of sight
    " https://stackoverflow.com/a/2828550/695964
    " set backupdir-=.
    " set backupdir^=~/tmp//,/tmp//,$TEMP//

    " Map ChangeFontSize() to hot keys
    let g:mapleader = " "
    call s:ConfigureAirline()

    set cursorline " highlight current line
    " last window will always have a status line. This is needed by vim-airline
    set laststatus=2
    set directory+=$TEMP
    " Try file encodings in this order
    " https://www.zhihu.com/question/22363620
    set fileencodings=ucs-bom,utf-8,utf-16,gbk,big5,gb18030,latin1

    set nowrap " Do not wrap long lines
    set vb            " Use visual bell instead of beep
    set linebreak       " break line at word boundary
    set number          " line number
    " allow a window to shrink minimally
    set winminheight=0
    set winminwidth=0

    " if (has('gui_running'))
    "     set foldcolumn=4
    " endif
    " set foldminlines=0 " allow folding 1-liner
    set nofen

    set display+=lastline "with this, the last line will not have @ chars.
    if !has('nvim')
        " Using sgr mouse so vim is clickable after column 220.
        " See https://stackoverflow.com/a/19253251
        set ttymouse=sgr
    endif
    set wildmenu     " Show menu for command line autocomplete
    set ignorecase
    set smartcase

    " When formatting texts, consider indentation of list paragraphs
    set formatoptions+=n

    " Show trailing spaces
    highlight ExtraWhitespace ctermbg=red guibg=red
    match ExtraWhitespace /\s\+$/

    " ------------------------- GUI settings -------------------------
    if has("gui_running") && !has("ivim")
        set go-=T
        silent! colo PaperColor
        call s:ConfigureFont()
        autocmd GUIEnter * winsize 100 40
    else
        " Use vimdiff to test theme under console
        silent! colo PaperColor
    endif
    " ------------------------- GUI settings -------------------------

    call s:ConfigureTags()
    call s:ConfigureCscope()

    " Mappings for quickfix window. note qf cannot be modified, so we can
    " re-use any key that modifies the buffer (e.g., pPaAiI), without worrying
    " we'd hijack some useful keys.
    if has('autocmd') && has('quickfix')

        fun! <SID>onEnterQuickfixWin()
            " figure out if current win is quickfix list or location list:
            " https://stackoverflow.com/a/53491991/695964
            if getwininfo(win_getid())[0]['loclist']
                let gotoCmd = '.ll'
                let closeCmd = 'lcl'
            else
                let gotoCmd = '.cc'
                let closeCmd = 'ccl'
            endif

            " Follow link and close quickfix (i: go _in_)
            exe printf('nnoremap <buffer> <Enter> <esc>:.%s<cr>:%s<CR>', gotoCmd, closeCmd)
            " Original <Enter> behavior: go to but keep qf window open
            exe printf('nnoremap <buffer> i <esc>:.%s<CR>', gotoCmd)
            " Preview and stay in quickfix window
            exe printf('nnoremap <buffer> p <esc>:.%s<cr><C-W>p', gotoCmd)
        endfun
        au BufWinEnter quickfix call <SID>onEnterQuickfixWin()
    endif

    " ------------------------- OMNI COMPLETION SETTINGS -------------------------
    if has('autocmd')

        set pumheight=8 " set completion window height
        " the following lines close the preview window after a completion
        autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
        autocmd InsertLeave * if pumvisible() == 0|pclose|endif

    endif
    " ------------------------- OMNI COMPLETION SETTINGS -------------------------

    " ------------------------- KEY MAPPINGS -------------------------
    " Danger: quit without saving
    map XX :qa!<Enter>

    " Save in insert mode
    inoremap <c-x><c-s> <c-\><c-o>:w<cr>
    " Save in normal mode
    nnoremap <c-x><c-s> :w<cr>

    " FZF command palette
    nnoremap <Leader>p :Commands<cr>
    nnoremap <Leader>f :Files<cr>
    nnoremap <Leader>b :Buffers<cr>
    let g:fzf_preview_window = [] " disable fzf preview window

    " Pressing <Leader> twice put you in command mode
    noremap <Leader><Leader> :
    nnoremap ; :
    vnoremap ; :
    nnoremap , ;
    vnoremap , ;
    map <C-Tab> <C-W><C-W>

    " Quick escape from insert mode
    " Disabled since it interfere not with typing, BUT with pasting
    " in insert mode - if text contains `jj` it acts as ESC
    " [2019-07-05]: still enable - we should NOT paste in insert mode
    imap jj <ESC>

    " To resolve <S-Tab> conflict with snipMate
    imap <C-J> <Plug>delimitMateS-Tab
    " ------------------------- KEY MAPPINGS -------------------------

    " ------------------------- CUSTOM COMMANDS -------------------------
    " copy file name to system clipboard (verified on Windows)
    command Cpfn call <SID>CopyFileName()
    command Hsbar call s:ToggleHorizontalScrollbar()
    command CD cd %:p:h
    command LCD lcd %:p:h
    command Bcc call s:ExchangeMake()
    command Bccl call s:ExchangeMake('buildd.err')

    " Enable using CodeSearch as a grep program
    command -nargs=+ Csearch call s:Csearch(<f-args>)

    command Exdiff !start cmd /c windiff.exe -l %
    command Exedit !sd edit %
    command Exopened !start cmd /c sdv opened

    " I tried !start cmd /c start "" "URL". This URL can contain spaces. But
    " it cannot contain # signs as a limitation of Windows filenames. In
    " additional, ftype http doesn't give me the correct default browser
    " executable. So I have to use a hard coded browser.
    command -nargs=+ G !start "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" "https://www.google.com/search?q=<args>"
    command -nargs=+ DD !start "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" "http://devdocs.io\#q=<args>"
    " ------------------------- CUSTOM COMMANDS -------------------------

    " ------------------------- FILE TYPE SPECIFIC CONFIGURATIONS -------------------------
    if has('autocmd')
        autocmd FileType thrift     call s:ConfigureThrift()
        autocmd FileType python     call s:ConfigurePython()
        autocmd FileType cs         call s:ConfigureCSharp()
        autocmd FileType tex        call s:ConfigureTex()
        autocmd FileType coffee     call s:ConfigureCoffeeScript()
        autocmd FileType csv        call s:ConfigureCsv()
        autocmd FileType javascript call s:ConfigureJavascript()
        autocmd FileType markdown   call s:ConfigureMarkdown()

        autocmd User GoyoEnter nested call <SID>goyo_enter()
        autocmd User GoyoLeave nested call <SID>goyo_leave()

        autocmd BufNewFile,BufRead *.md set filetype=markdown " override .md from modula2
    endif
    " ------------------------- FILE TYPE SPECIFIC CONFIGURATIONS -------------------------

    if s:IsWindows()
        " Make sure we use findstr on Windows, no matter if grep is there or not
        set grepprg=findstr\ /N

        " Windows viewdir is on system path, regular user cannot write to it
        " https://groups.google.com/g/vim_dev/c/5AftH0uBqTs?pli=1
        set viewdir=$HOME/.vim/view

        " Don't source mswin, as it introduces too many keybindings that can
        " be otherwise used
        " source $VIMRUNTIME/mswin.vim " Add support for copy/paste/cut/undo
        " " Unmap windows behaviors of the following keys from mswin.vim
        " unmap <C-Y>
        " unmap <C-Z>
    endif

    " Ctrl-C/V/A. Only do this on Windows. As in *nix some key conflicts,
    " e.g., C-Q can't be used for block selection so we have to use C-V.
    vnoremap <C-C> "+y
    map      <C-V> "+gP
    cmap     <C-V> <C-R>+
    imap     <C-V> <C-R>+

    " Remap block selection <c-v> to <a-v>
    " On Mac (and in VNC) <a-v> is <esc>v
    " https://stackoverflow.com/a/24047539/695964
    nnoremap <a-v> <c-v>
    nnoremap <esc>v <c-v>

    if s:IsWindows()
        noremap  <C-A> gggH<C-O>G
        inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
        cnoremap <C-A> <C-C>gggH<C-O>G
        onoremap <C-A> <C-C>gggH<C-O>G
        snoremap <C-A> <C-C>gggH<C-O>G
        xnoremap <C-A> <C-C>ggVG
    endif

    if filereadable($HOME."/local.vim")
        exe "so $HOME"."/local.vim"
    endif

    call s:ConfigureMenu()
    call s:ConfigureEasyMotion()
    call s:ConfigureSuperTab()
    " call s:ConfigureOmniSharp()
    call s:ConfigureDelimiteMate()
    call s:ConfigureVimLsp()

    " Don't close location list when CR is pressed on an entry
    let g:syntastic_auto_loc_list = 0

    if !s:IsWindows()
        runtime! ftplugin/man.vim
    endif

    if executable('ag') " use ag and fallback to ack
        let g:ackprg = 'ag -f --vimgrep'
    endif

    " Don't pop up errors when checkers return non-zero code
    let g:syntastic_exit_checks = 0

    " Don't invoke linter by default (slow)
    let g:syntastic_mode_map = { "mode": "passive" }

    " By default use coding tab setting
    call s:ConfigCoding()
    
    let g:rainbow_active = 1
    nnoremap j gj
    nnoremap k gk
    command Here NERDTree %:h

    call s:ConfigureNeomake()
    call s:ConfigureSlime()


    command! P call paste_mode#PasteInsert()

    call s:ConfigureTagbar()

    if !s:IsWindows()
        call s:SourceSite()
    endif

    call s:ConfigureVimMark()

    " vim-bookmarks
    let g:bookmark_auto_save = 1
    let g:bookmark_no_default_key_mappings = 1
    cnoreabbrev bml BookmarkShowAll
    cnoreabbrev bma BookmarkAnnotate
    cnoreabbrev bmm BookmarkToggle

    command DT r !date

    try
        call s:ConfigureBG()
    catch /.*/
        echom 'Error configure BG ' .. v:exception
    endtry

    " so that vim yanks to system clipboard via tmux loadb
    " see https://github.com/roxma/vim-tmux-clipboard/pull/20
    let g:vim_tmux_clipboard#loadb_option = '-w'

endfunction " Main

fun! s:ConfigureBG()
    if get(g:, 'configure_bg_done', 0)
        " this function should only be called once
        " (to ensure we don't start the timer multiple times)
        return
    endif
    let g:configure_bg_done = 1

    " Timer to periodically check and update 'bg' setting
    func Vimrc_CheckBG(job_id)
        let fn = expand('~/.bg')
        if filereadable(fn)
            let lines = readfile(fn)
            if len(lines) > 0
                let bg = trim(lines[0])
                if &bg != bg
                    exe 'set bg=' . lines[0]
                endif
            endif
        endif
    endfun
    call Vimrc_CheckBG(0)
    "call timer_start(3000, 'Vimrc_CheckBG', {'repeat': -1})

    " update bg across all vim instances
    func <SID>BGUpdateAll(val)
        exe 'set bg=' . a:val
        call writefile([a:val], expand('~/.bg'))
    endfun

    command! BG if &bg == 'light' | call <SID>BGUpdateAll('dark') | else | call <SID>BGUpdateAll('light') | endif
endfun

function s:ConfigureVimLsp()
    " Only enable logging when debugging - this causes lag in insert mode:
    " call mkdir('/tmp/vim-lsp', 'p')
    " let g:lsp_log_file = expand('/tmp/vim-lsp/vim-lsp.' . getpid() . '.log')

    let g:lsp_diagnostics_echo_cursor = 1
    let g:lsp_diagnostics_echo_delay = 200
    let g:lsp_diagnostics_highlights_enabled = 0
    let g:lsp_diagnostics_virtual_text_enabled = 0
    let g:lsp_diagnostics_virtual_text_insert_mode_enabled = 0
    let g:lsp_diagnostics_float_cursor = 1
    let g:lsp_diagnostics_float_delay = 2000

    " Do not prompt for installing LSP servers
    let g:lsp_settings_enable_suggestions = 0

    let g:lsp_settings = {
    \  'efm-langserver': {'disabled': v:false}
    \}

    augroup lsp_install
        au!
        autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
    augroup END

    function! s:on_lsp_buffer_enabled() abort
        " setlocal omnifunc=lsp#complete
        setlocal signcolumn=yes
        " Disable tagfunc so lsp can be used in addition to tags
        " if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
        nmap <buffer> gd <plug>(lsp-definition)
        nmap <buffer> gs <plug>(lsp-document-symbol-search)
        nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
        nmap <buffer> gr <plug>(lsp-references)
        nmap <buffer> gi <plug>(lsp-implementation)
        nmap <buffer> gp <plug>(lsp-peek-definition)
        nmap <buffer> gt <plug>(lsp-type-definition)
        nmap <buffer> <leader>rn <plug>(lsp-rename)
        nmap <buffer> [g <plug>(lsp-previous-diagnostic)
        nmap <buffer> ]g <plug>(lsp-next-diagnostic)
        nmap <buffer> gh <plug>(lsp-hover)
        nmap <buffer> <leader>d <plug>(lsp-document-diagnostics) <bar> <c-w><c-p>
        inoremap <buffer> <expr><c-f> lsp#scroll(+4)
        inoremap <buffer> <expr><c-d> lsp#scroll(-4)
    endfunction

endfunction


au BufRead,BufNewFile *.fs set filetype=fsharp


fun s:ConfigureSlime()
    let g:slime_target = 'tmux'
    let g:slime_no_mappings = 1
    xmap <Leader>s <Plug>SlimeRegionSend
    nmap <Leader>s <Plug>SlimeParagraphSend

    fun ToggleSlimeIpy()
        if exists('g:slime_python_ipython')
            unlet g:slime_python_ipython
            echo "g:slime_python_ipython OFF"
        else
            let g:slime_python_ipython = 1
            echo "g:slime_python_ipython ON"
        endif
    endfun

    " Toggle ipython support
    command IPY  call ToggleSlimeIpy()

    " Turn it on by default
    let g:slime_python_ipython = 1
endfun

" Removes DrawIt mappings
autocmd VimEnter * silent! unmap! <leader>di
autocmd VimEnter * silent! unmap! <leader>ds

fun s:ConfigureNeomake()
    function s:ConfigureNeomakeOnBufEnter()
        NeomakeDisableBuffer
        if &filetype == "sh" || &filetype == "python"
            NeomakeEnableBuffer
        endif
    endfunction
    autocmd BufEnter * silent! call s:ConfigureNeomakeOnBufEnter()
    silent! call neomake#configure#automake('nrwi', 500)
endfun

fun s:ConfigureTagbar()
    set updatetime=500
    let g:tagbar_sort=0
endfun

fun s:SourceSite()
    let dir = expand('$HOME/.vim/rc')
    call system('mkdir -p '.dir)
    for rc in glob(dir.'/*', 0, 1)
        exec 'source '.rc
    endfor
endfunc

fun s:ConfigureVimMark()
    " Use 18 colors instead of 6
    let g:mwDefaultHighlightingPalette = 'extended'
endfun

fun <SID>CopyFileName()
    let fn = expand("%:p")
    let @* = fn
    if exists('*OSCYankString')
        call OSCYankString(fn)
    endif
    if executable('tmux')
        call system('tmux loadb -', fn)
    endif
endfun

" Edits the realpath of a symlink
fun FollowLink_FollowLink() abort
    let bfn = resolve(expand('%'))
    " We need to completely wipeout the buffer before editing the real path.
    " Otherwise vim keeps opening the symlink.
    bwipeout
    exe 'edit '.bfn
endfun
command FL call FollowLink_FollowLink()

fun s:_Scratch()
    fun <SID>Scratch()
        set buftype=nofile
        file *SCRATCH*
    endfun
    command -nargs=0 ScratchOn call <SID>Scratch()
    command -nargs=0 ScratchNew new | call <SID>Scratch()
endfun
call s:_Scratch()

fun s:_Vimrc()
    command -bang -nargs=0 Vimrc
                \ if '<bang>' == '!'
                \ |     so ~/.vimrc
                \ | else
                \ |     e ~/.vimrc
                \ | endif
endfun
call s:_Vimrc()

fun ShowLines(lines)
    " higlight given line range specs
    " 1-2, 3-4, 5, 7-8
    silent! sign undefine lino
    sign define lino text=co
    let linelist = []
    for line_range in split(a:lines, ',')
        let line_range = trim(line_range)
        let start_end = split(line_range, '-')
        if len(start_end) == 1
            let start = start_end[0]
            let end = start_end[0]
        else
            let start = start_end[0]
            let end = start_end[1]
        endif
        let linelist = linelist + range(start, end)
    endfor

    for id in range(len(linelist))
        let line = linelist[id]
        exe printf('sign place %d line=%d name=lino', id+1, line)
    endfor
endfun

fun s:ft_note()
    fun <SID>ft_note_autocmd()
        fun! <SID>ft_note_insert_dt_title()
            " insert text: '# datetime' above current line
            let line = line('.') - 1
            let text = printf('# %s', trim(system('date')))
            call append(line, [text])
        endfun
        nnoremap <leader>dt <esc>:call <SID>ft_note_insert_dt_title()<cr>
        nnoremap <leader>-- <esc>o<esc>70a-<esc>
        nnoremap <leader>== <esc>o<esc>70a=<esc>
    endfun
    augroup ft_note
        au!
        " TODO: put 'note' in a filetype plugin so we don't need to enable
        " it this way
        au FileType *.note,note.*,*.note.* call <SID>ft_note_autocmd()
        if !s:IsWindows()
            " view related functionality has some problem with windows
            " e.g., viewdir is on system path, and others. So disable it
            " when on windows
            au BufWrite,VimLeave * if &ft =~ 'note' | mkview | endif
            au BufWinEnter       * if &ft =~ 'note' | silent loadview | endif
        endif
    augroup END
endfun
call s:ft_note()

" 
" Experimental: Tue May 17 10:41:51 PDT 2022
" https://stackoverflow.com/a/42118416/695964
"
fun s:ConfigureCursorShape()
    let &t_SI = "\e[6 q"
    let &t_EI = "\e[2 q"
endfunc
call s:ConfigureCursorShape()


nnoremap <c-e> 2<c-e>
nnoremap <c-y> 2<c-y>

if !exists('g:vscode')
    call s:Main()
endif

fun s:ConfigureHgFilesMode()

  " ---- frontend
  command -nargs=? HGfiles call <SID>HGF2('<args>')
  fun <SID>HGF2(rev = '.')
    exec printf('new **HG FILES [rev: %s]', a:rev)
    call append(0, systemlist('hg show --stat ' . a:rev))
    setlocal buftype=nofile
    setlocal filetype=hgfiles
    setlocal nomodifiable
    setlocal readonly
  endfun

  " ---- mode
  fun <SID>hg_files_mode()
    nnoremap <buffer> d <esc>:call <SID>hg_files_diff_file()<enter>
    nnoremap <buffer> <enter> <esc>:call <SID>hg_files_edit_file()<enter>
  endfun

  augroup hgfiles
    au!
    au FileType hgfiles call <SID>hg_files_mode()
  augroup END

  " ---- mappings
  fun <SID>hg_files_diff_file()
    let fp = expand("<cfile>")
    let hgroot = system('hg root')->trim()
    let fp = hgroot . '/' . fp
    windo diffoff 
    tabnew
    exec 'e ' . fp
    HGdiff .^
  endfun

  fun <SID>hg_files_edit_file()
    let fp = expand("<cfile>")
    let hgroot = system('hg root')->trim()
    let fp = hgroot . '/' . fp
    tabnew
    exec 'e ' . fp
  endfun

endfun | call s:ConfigureHgFilesMode()
